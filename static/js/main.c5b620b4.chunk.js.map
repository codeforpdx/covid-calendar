{"version":3,"sources":["Definitions.tsx","Footer.tsx","Instructions.tsx","types.ts","Home.tsx","DateQuestion.tsx","MultipleChoiceQuestion.tsx","InHouseExposureQuestion.tsx","InHouseExposureQuestions.tsx","util.tsx","Person.tsx","calculator.ts","Household.tsx","Resources.tsx","Recommendation.tsx","App.tsx","index.tsx"],"names":["Definitions","strongQuarantine","className","t","strongIsolate","style","marginTop","marginBottom","textAlign","jt","src","process","Footer","background","position","bottom","width","height","maxWidth","color","display","href","Instructions","renderInstructionContent","words","CovidEventName","Home","props","minHeight","to","onClick","setLanguage","language","role","paddingBottom","alignItems","flexDirection","padding","borderRadius","top","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","letterSpacing","flex","order","flexGrow","margin","justifyContent","paddingLeft","DateQuestion","questionFieldText","questionFieldTextState","get","parsedDate","parse","Date","questionFieldDate","isValid","htmlFor","id","questionFieldName","promptText","selected","onChange","date","validDate","set","format","name","MultipleChoiceQuestion","checked","questionText","type","tooltip","flexShrink","marginLeft","InHouseExposureQuestion","inHouseExposureEvent","inHouseExposureEventState","isExposed","exposed","isOngoing","ongoing","person","otherPerson","v","ongoingState","newOngoing","index","InHouseExposureQuestions","meaningfulInHouseExposures","map","relevantInHouseExposureEventsState","find","eventState","event","quarantinedPerson","contagiousPerson","key","isContagious","Boolean","covidEvents","PositiveTest","SymptomsStart","Person","personState","members","membersState","covidEventsState","editingHousehold","editingHouseholdState","inHouseExposureEventsState","filter","feelingSick","gotPositiveTest","contagious","React","useState","recommendationDetailOpenByDefault","recommendationDetailIsOpen","setRecommendationDetailIsOpen","commonSymptomsList","onCheckboxChange","fieldName","e","target","nextContagious","setContagiousState","buildCovidEventQuestion","datePromptText","reverse","none","newExposureEvents","otherContagious","vaccinated","dateMissing","dateInvalid","merge","compact","renderRecommendationDetail","infected","guidanceDefinition","guidance","endDate","guidanceMessage","getTestedNote","noSymptomsFor24Hours","peopleWithOngoingExposureWithSymptoms","length","names","join","LastCloseContact","renderGuidanceMessage","value","stopPropagation","memberState","match","personNumber","addNewPerson","c","open","renderGuidance","aria-hidden","computeHouseHoldQuarantinePeriod","household","inHouseExposures","flow","isolationPeriod","covidPositiveEvents","illnessOnset","thru","dates","min","tenDaysAfterOnset","addDays","symptomsEnd","undefined","isolationEndDate","max","computeIsolationPeriod","startDate","partition","infectedGuidances","updatedQuarantinedGuidance","relevantInHouseExposures","normalize","infectedGuidance","infectionSource","normalizedInHouseExposures","exposures","outHouseExposureDateString","outHouseExposureDate","outHouseExposure","addOutsideExposures","earliestExposure","minBy","exposure","latestExposure","maxBy","personWithOngoingExposure","computeQuarantineGuidance","Household","inHouseExposureEvents","guidances","editingPersonRef","useRef","flexWrap","backgroundColor","healthCentersLink","textDecoration","renderTitle","personGuidance","viewBox","fill","xmlns","cx","cy","r","stroke-width","d","window","scrollTo","renderAction","Resources","mapLink","QuestionBlock","question","answer","isOpen","setIsOpen","Recommendation","paddingTop","App","useReactState","setLanguageState","translationObject","require","addLocale","useLocale","innerHeight","updateHeight","useEffect","addEventListener","removeEventListener","firstPerson","isNewPerson","editing","editingPersonState","from","forEach","split","slice","basename","path","currentId","newPersonNumber","newPerson","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c5b620b4.chunk.js","sourcesContent":["import React from \"react\";\nimport { t, jt } from 'ttag';\n\nexport default function Definitions() {\n\n  const strongQuarantine = <strong className=\"our-blue\">{t`quarantine`}</strong>\n  const strongIsolate = <strong className=\"our-blue\">{t`isolate`}</strong>\n  return (\n        <div className=\"f4\" >\n            <div className=\"row\"\n              style={{\n                marginTop: \"80px\",\n                marginBottom: \"60px\",\n                textAlign: \"left\"\n              }}\n            >\n              <div className=\"col-md-9 text-align-left pt3\" >\n                {jt`People who must ${strongQuarantine} should avoid physical contact\n                with everyone outside their home. This includes work, groceries, and socializing.`}\n              </div>\n              <div className=\"col-md-3\" style={{ textAlign: \"center\" }}>\n                <img src={process.env.PUBLIC_URL + \"/quarantine.svg\"} />\n              </div>\n            </div>\n            <hr/>\n            <div className=\"row\"\n              style={{\n                marginTop: \"80px\",\n                marginBottom: \"60px\",\n                textAlign: \"left\"\n              }}\n            >\n              <div className=\"col-md-9 text-align-left pt3\" >\n                {jt`People who must ${strongIsolate} should keep away from\n                everyone inside and outside the home.`}\n              </div>\n              <div className=\"col-md-3\" style={{ textAlign: \"center\" }}>\n               <img src={process.env.PUBLIC_URL + \"/isolation.svg\"} />\n             </div>\n          </div>\n        </div>\n  )\n}\n","import React from \"react\";\nimport { t } from 'ttag';\n\nexport default function Footer() {\n\n  return (\n    <footer\n        className={\"py-5\"}\n        style={{\n          background: \"#1F252F\",\n          position: \"absolute\",\n          bottom: \"0%\",\n          width: \"100%\",\n          height: \"250px\"\n        }}\n      >\n        <div\n          className={\"container\"}\n          style={{\n            maxWidth: \"500px\",\n            textAlign: \"center\"\n          }}\n        >\n          <div style={{ color: \"#FFFFFF\" }}>\n            {t`Made in partnership with Clackamas County and Code for PDX.\n              Recommendations follow guidelines from the CDC.`}\n          </div>\n          <div className=\"py-3\"></div>\n          <div\n            style={{\n              position: \"relative\",\n              width: \"100%\",\n              height: \"50px\"\n            }}\n          >\n            <span style={{ display: \"inline\" }}>\n              <a href={\"https://www.clackamas.us/publichealth\"}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/logo-clackamas.png\"}\n                  style={{ height: \"100%\" }}\n                />\n              </a>\n            </span>\n            <span style={{ display: \"inline-block\", width: \"50px\" }}>\n              &nbsp;\n            </span>\n            <span style={{ display: \"inline\" }}>\n              <a href={\"https://www.codeforpdx.org/\"}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/logo-code-for-pdx.png\"}\n                  style={{ height: \"100%\" }}\n                />\n              </a>\n            </span>\n          </div>\n        </div>\n      </footer>\n  )\n}\n","import React from \"react\";\nimport { t, jt } from 'ttag';\n\nexport default function Instructions() {\n\n  function renderInstructionContent(words:any) {\n    return (\n      <div className=\"resourceAnswerText\">\n      {words}\n      </div>\n    )\n  }\n\n  return (\n    <div >\n      <div className=\"pb4 text-align-center\" style={{\"textAlign\":\"center\"}}> <h2> {t`How to use this tool`} </h2> </div>\n      <div className=\"pv3 step-header\" >{t`STEP 1`}</div>\n      {renderInstructionContent(t`For each person you live with, answer questions about their symptoms.`)}\n      <img  src={process.env.PUBLIC_URL + \"/step1.svg\"} />\n      <hr/>\n      <div className=\"pv3 step-header\">{t`STEP 2`}</div>\n      {renderInstructionContent(t`After inputting your answers, you’ll receive recommendations on what each person should do to stay safe based on official CDC guidelines.`)}\n      <img  src={process.env.PUBLIC_URL + \"/step2.svg\"} />\n      <div className=\"pb2\"/>\n      <hr/>\n      <div className=\"pv3 step-header\">{t`STEP 3`}</div>\n      {renderInstructionContent(t`Tap on a recommendation to learn more about the safety behind it.`)}\n      <img  src={process.env.PUBLIC_URL + \"/step3.svg\"} />\n      <hr/>\n    </div>\n  )\n}\n","export interface PersonData {\n  id: number;\n  name: string;\n  covidEvents: CovidEvents;\n  noSymptomsFor24Hours: boolean;\n  feelingSick: boolean;\n  vaccinated: boolean;\n  isNewPerson: boolean;\n  editing: boolean;\n}\n\nexport enum CovidEventName {\n  LastCloseContact = \"Most Recent Close Contact\",\n  SymptomsStart = \"Illness Onset\",\n  PositiveTest = \"Most Recent Positive Test\"\n}\n\nexport type CovidEvents = {\n  [key in CovidEventName]: string;\n};\n\nexport interface InHouseExposure {\n  contagiousPerson: number;\n  quarantinedPerson: number;\n  exposed: boolean;\n  ongoing: boolean;\n  date: string;\n}\n\nexport interface Exposure {\n  startDate: Date;\n  endDate: Date;\n  infectionSource?: PersonData;\n}\n\nexport interface Guidance {\n  person: PersonData;\n  infected: boolean;\n  startDate?: Date;\n  endDate?: Date;\n  infectionSource?: PersonData;\n  peopleWithOngoingExposureWithSymptoms?: string[];\n}\n\nexport const colors = [\n  \"#b35806\",\n  \"#e08214\",\n  \"#fdb863\",\n  \"#fee0b6\",\n  \"#d8daeb\",\n  \"#b2abd2\",\n  \"#8073ac\",\n  \"#542788\"\n];\n","import React from \"react\";\nimport GridView from \"./GridView\";\nimport Definitions from \"./Definitions\";\nimport Footer from \"./Footer\";\nimport Instructions from \"./Instructions\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\nimport { Link } from \"react-router-dom\";\nimport { t, jt} from \"ttag\";\n\ninterface Props {\n  language: string;\n  setLanguage: Function;\n}\n\nexport default function Home(props: Props) {\n  function renderTitle() {\n    return (\n      <>\n        <h1 className=\"page-header mb-4\">\n          {\" \"}\n          {t`This calculator determines whether you’ll quarantine or isolate, and for how long. `}\n        </h1>\n        <p className=\"f4\"> {t`Answer a few simple questions and we will match your situation to the best advice according to CDC guidelines.`} </p>\n        <div style={{ alignItems: \"left\", position: \"relative\", paddingBottom: \"120px\" }}>\n          <Link className=\"get-started-link\"\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              padding: \"16px 40px\",\n              position: \"absolute\",\n              borderRadius: \"40px\",\n              width: \"225px\",\n              height: \"58px\",\n              top: \"20px\",\n              fontFamily: \"Arial\",\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"18px\",\n              lineHeight: \"160%\",\n              textAlign: \"left\",\n              letterSpacing: \"0.02em\",\n              color: \"#FFFFFF\",\n              flex: \"none\",\n              order: 0,\n              flexGrow: 0,\n              margin: \"0px 0px\"\n            }}\n            to=\"/recommendation\"\n          >\n            {t`Get Started`}\n          </Link>\n        </div>\n      </>\n    );\n  }\n  return (\n    <div style={{ position: \"relative\", minHeight: \"100%\" }}>\n      <header>\n        <div className=\"navbar\">\n          <div\n            className=\"container d-flex justify-content-between\"\n          >\n            <Link to=\"/\" className=\"d-flex align-items-center home-link\">{t`COVID CALCULATOR`}</Link>\n            <button className=\"language-button\" onClick={()=> props.setLanguage(props.language===\"en\" ? \"es\" : \"en\")}>\n              <div>{(props.language===\"en\" ? \"ESPAÑOL\" : \"ENGLISH\")}</div>\n            </button>\n          </div>\n        </div>\n      </header>\n      <main className={\"main  off-black\"} role={\"main\"} style={{ paddingBottom: \"250px\"}}>\n        <section className={\"jumbotron\"} style={{ background: \"#FFFFFF\" }}>\n          <div className=\"container\">{renderTitle()}</div>\n        </section>\n        <section className={\"jumbotron\"} >\n            <div className=\"container\">\n              <hr/>\n              <Definitions/>\n            </div>\n        </section>\n        <section className={\"jumbotron\"} style={{ background: \"#FFFFFF\" }}>\n          <div className=\"container\">\n            <Instructions/>\n          </div>\n          <div style={{ width: \"auto\", alignItems:\"center\", justifyContent: \"center\", position: \"relative\", paddingBottom: \"120px\", paddingLeft:\"calc(50% - 350px)\"}}>\n          <Link className=\"get-started-link\"\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              padding: \"18px 40px\",\n              position: \"absolute\",\n              borderRadius: \"40px\",\n              width: \"100%\",\n              maxWidth: \"700px\",\n              height: \"80\",\n              top: \"20px\",\n              fontFamily: \"Arial\",\n              fontStyle: \"normal\",\n              fontWeight: \"bold\",\n              fontSize: \"18px\",\n              lineHeight: \"160%\",\n              textAlign: \"center\",\n              letterSpacing: \"0.02em\",\n              color: \"#FFFFFF\",\n              flex: \"none\",\n              order: 0,\n              flexGrow: 0,\n              margin: \"0px 0px\"\n            }}\n            to=\"/recommendation\"\n          >\n            {t`Get Started`}\n          </Link>\n        </div>\n        </section>\n\n      </main>\n      <Footer/>\n    </div>\n  );\n}\n","import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { State } from \"@hookstate/core\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { parse, format, isValid } from \"date-fns\";\ninterface Props {\n  id: number;\n  promptText: string;\n  questionFieldTextState: State<string>;\n  questionFieldName: string;\n}\n\nexport default function DateQuestion(props: Props) {\n  const questionFieldText = props.questionFieldTextState.get();\n  const parsedDate = parse(questionFieldText, \"M/dd/yyyy\", new Date());\n  const questionFieldDate = isValid(parsedDate) ? parsedDate : new Date();\n\n  return (\n    <div className=\"subquestion questionnaire-text\">\n      <label htmlFor={`${props.id}-${props.questionFieldName}`}>\n        {props.promptText} <span className=\"f6 fw3\">mm/dd/yyyy</span>\n      </label>\n      <DatePicker\n        className=\"form-control\"\n        selected={questionFieldDate}\n        onChange={(date: Date) => {\n          const validDate = isValid(date) ? date : new Date(); // Default to today\n          props.questionFieldTextState.set(format(validDate, \"MM/dd/yyyy\"));\n        }}\n        name={props.questionFieldName}\n        id={`${props.id}-${props.questionFieldName}`}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { parse, format } from \"date-fns\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel\n} from \"@reach/disclosure\";\n\ninterface Props {\n  id: number;\n  questionText: string;\n  checked: boolean;\n  onChange: (e: React.BaseSyntheticEvent) => void;\n  tooltip?: JSX.Element;\n}\n\nexport default function MultipleChoiceQuestion(props: Props) {\n  return (\n    <div className=\"custom-control custom-checkbox mv4\">\n      <input\n        className=\"custom-control-input\"\n        checked={props.checked}\n        id={`checkbox-${props.id}-${props.questionText}`}\n        type=\"checkbox\"\n        onChange={props.onChange}\n      />\n      <Disclosure>\n        <label\n          className=\"custom-control-label w-100\"\n          htmlFor={`checkbox-${props.id}-${props.questionText}`}\n        >\n          <div className=\"questionnaire-text d-flex justify-content-between align-items-start\">\n            {props.questionText}\n            {props.tooltip && (\n              <DisclosureButton style={{ flexShrink: 0 }}>\n                <img\n                  src={process.env.PUBLIC_URL + \"/circle-question.svg\"}\n                  style={{ marginLeft: \"0.2rem\" }}\n                />\n              </DisclosureButton>\n            )}\n          </div>\n        </label>\n        {props.tooltip && (\n          <DisclosurePanel>\n            <div className=\"our-tooltip\">{props.tooltip}</div>\n          </DisclosurePanel>\n        )}\n      </Disclosure>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport DateQuestion from \"./DateQuestion\";\nimport { format } from \"date-fns\";\nimport { t } from 'ttag';\n\ninterface Props {\n  id: number;\n  index: number;\n  person: PersonData;\n  otherPerson: PersonData;\n  inHouseExposureEventState: State<InHouseExposure>;\n}\n\nexport default function InHouseExposureQuestion(props: Props) {\n  const inHouseExposureEvent = props.inHouseExposureEventState.get();\n  const isExposed = inHouseExposureEvent.exposed;\n  const isOngoing = inHouseExposureEvent.ongoing;\n  return (\n    <div className=\"mb-3\">\n      <MultipleChoiceQuestion\n        id={props.id}\n        questionText={t`${props.person.name} had close contact with ${props.otherPerson.name}`}\n        checked={isExposed}\n        onChange={() => props.inHouseExposureEventState.exposed.set(v => !v)}\n      />\n      {isExposed && (\n        <MultipleChoiceQuestion\n          id={props.id}\n          questionText={t`${props.person.name}'s close contact with ${props.otherPerson.name} is ongoing`}\n          checked={isOngoing}\n          onChange={() => {\n            const ongoingState = props.inHouseExposureEventState.ongoing;\n            const ongoing = ongoingState.get();\n            const newOngoing = !ongoing;\n            ongoingState.set(newOngoing);\n            if (newOngoing) {\n              props.inHouseExposureEventState.date.set(\"\");\n            } else {\n              props.inHouseExposureEventState.date.set(\n                format(new Date(), \"MM/dd/yyyy\")\n              );\n            }\n          }}\n        />\n      )}\n      {isExposed && !isOngoing && (\n        <DateQuestion\n          id={props.id}\n          promptText={t`Date of last contact`}\n          questionFieldTextState={props.inHouseExposureEventState.date}\n          questionFieldName={`crossExposure-${props.index}`}\n        />\n      )}\n    </div>\n  );\n}\n","import { InHouseExposure, PersonData } from \"./types\";\nimport InHouseExposureQuestion from \"./InHouseExposureQuestion\";\nimport React from \"react\";\nimport { State } from \"@hookstate/core/dist\";\n\ninterface Props {\n  person: PersonData;\n  meaningfulInHouseExposures: PersonData[];\n  relevantInHouseExposureEventsState: State<InHouseExposure>[];\n}\n\nexport default function InHouseExposureQuestions(props: Props) {\n  return (\n    <>\n      {props.meaningfulInHouseExposures.map((otherPerson, index) => {\n        const inHouseExposureEventState = props.relevantInHouseExposureEventsState.find(\n          (eventState: State<InHouseExposure>) => {\n            const event = eventState.get();\n            return (\n              event.quarantinedPerson === otherPerson.id ||\n              event.contagiousPerson === otherPerson.id\n            );\n          }\n        );\n        if (inHouseExposureEventState) {\n          return (\n            <div key={props.person.id + \"-\" + index}>\n              <hr />\n              <InHouseExposureQuestion\n                id={props.person.id}\n                index={index}\n                person={props.person}\n                otherPerson={otherPerson}\n                inHouseExposureEventState={inHouseExposureEventState}\n              />\n            </div>\n          );\n        } else {\n          return <></>;\n        }\n      })}\n    </>\n  );\n}\n","import { flow, remove, concat } from \"lodash/fp\";\nimport { CovidEventName, PersonData } from \"./types\";\n\nexport function replace<T>(array: Array<T>, old: T, updated: T): Array<T> {\n  return flow(\n    remove(e => e === old),\n    concat([updated])\n  )(array);\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function isContagious(person: PersonData) {\n  return Boolean(\n    person.covidEvents[CovidEventName.PositiveTest] ||\n      person.covidEvents[CovidEventName.SymptomsStart]\n  );\n}\n","import React, { Ref } from \"react\";\nimport { useState, none, State } from \"@hookstate/core\";\nimport { CovidEventName, InHouseExposure, PersonData, Guidance } from \"./types\";\nimport DateQuestion from \"./DateQuestion\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport InHouseExposureQuestions from \"./InHouseExposureQuestions\";\nimport { compact } from \"lodash/fp\";\nimport { isContagious } from \"./util\";\nimport { format } from \"date-fns\";\nimport { t } from \"ttag\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel\n} from \"@reach/disclosure\";\n\ninterface Props {\n  personState: State<PersonData>;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  guidance: Guidance;\n  editingPersonRef: Ref<HTMLDivElement>;\n  addNewPerson: () => void;\n  recommendationDetailOpenByDefault: boolean;\n  language: string;\n}\n\nexport default function Person(props: Props) {\n  const person = props.personState.get();\n  const members = props.membersState.get();\n  const covidEventsState = props.personState.covidEvents;\n  const editingHousehold = props.editingHouseholdState.get();\n  const relevantInHouseExposureEventsState: State<\n    InHouseExposure\n  >[] = props.inHouseExposureEventsState.filter(\n    (eventState: State<InHouseExposure>) => {\n      const event: InHouseExposure = eventState.get();\n      return (\n        event.contagiousPerson === person.id ||\n        event.quarantinedPerson === person.id\n      );\n    }\n  );\n  const feelingSick =\n    covidEventsState[CovidEventName.SymptomsStart].get() !== \"\";\n  const gotPositiveTest =\n    covidEventsState[CovidEventName.PositiveTest].get() !== \"\";\n  const contagious = feelingSick || gotPositiveTest;\n  const [\n    recommendationDetailIsOpen,\n    setRecommendationDetailIsOpen\n  ] = React.useState(props.recommendationDetailOpenByDefault);\n\n  function commonSymptomsList() {\n    return (\n      <div>\n        {t`Common symptoms include:`}\n        <ul className=\"p-3 mx-3 mb-1\">\n          <li>{t`Fever or chills`}</li>\n          <li>{t`Cough`}</li>\n          <li>{t`Shortness of breath or difficulty breathing`}</li>\n          <li>{t`New loss of taste or smell`}</li>\n          <li>{t`Fatigue`}</li>\n          <li>{t`Muscle or body aches`}</li>\n          <li>{t`Headache`}</li>\n          <li>{t`Sore throat`}</li>\n          <li>{t`Congestion or runny nose`}</li>\n          <li>{t`Nausea or vomiting`}</li>\n          <li>{t`Diarrhea`}</li>\n        </ul>{\" \"}\n      </div>\n    );\n  }\n  function onCheckboxChange(fieldName: CovidEventName) {\n    return (e: React.BaseSyntheticEvent) => {\n      const checked = e.target.checked;\n      if (!checked) {\n        covidEventsState[fieldName].set(\"\");\n      } else {\n        covidEventsState[fieldName].set(format(new Date(), \"MM/dd/yyyy\"));\n      }\n      if (fieldName === CovidEventName.PositiveTest) {\n        const nextContagious = Boolean(checked || feelingSick);\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      } else if (fieldName === CovidEventName.SymptomsStart) {\n        const nextContagious = Boolean(checked || gotPositiveTest);\n        if (contagious !== nextContagious) {\n          setContagiousState(nextContagious);\n        }\n      }\n    };\n  }\n\n  function buildCovidEventQuestion(\n    fieldName: CovidEventName,\n    questionText: string,\n    datePromptText: string,\n    tooltip?: JSX.Element\n  ) {\n    return (\n      <>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={questionText}\n          checked={covidEventsState[fieldName].get() !== \"\"}\n          onChange={onCheckboxChange(fieldName)}\n          tooltip={tooltip}\n        />\n        {covidEventsState[fieldName].get() !== \"\" && (\n          <DateQuestion\n            id={person.id}\n            promptText={datePromptText}\n            questionFieldTextState={covidEventsState[fieldName]}\n            questionFieldName={fieldName}\n          />\n        )}\n      </>\n    );\n  }\n\n  function setContagiousState(contagious: boolean) {\n    relevantInHouseExposureEventsState.reverse().map(e => e.set(none)); // Remove all current exposures\n    const newExposureEvents = members.map((otherPerson: PersonData) => {\n      const otherContagious = isContagious(otherPerson);\n      if (person.id !== otherPerson.id && contagious !== otherContagious) {\n        const theAtRiskPerson = contagious ? otherPerson : person;\n        if (!theAtRiskPerson.vaccinated) {\n          return {\n            contagiousPerson: contagious ? person.id : otherPerson.id,\n            quarantinedPerson: contagious ? otherPerson.id : person.id,\n            exposed: true,\n            ongoing: true,\n            date: \"\",\n            dateMissing: false,\n            dateInvalid: false\n          };\n        }\n      }\n    });\n    props.inHouseExposureEventsState.merge(compact(newExposureEvents));\n  }\n\n  const meaningfulInHouseExposures = members.filter(\n    (otherPerson: PersonData) =>\n      person !== otherPerson && contagious !== isContagious(otherPerson)\n  );\n\n  function removeFromMembers() {\n    relevantInHouseExposureEventsState.reverse().map(e => e.set(none)); // Remove all current exposures\n    props.personState.set(none);\n    props.membersState.map((memberState: State<PersonData>, index: number) => {\n      if (memberState.get().name.match(/Person \\d+/)) {\n        const personNumber = index + 1;\n        memberState.name.set(`Person ${personNumber}`);\n      }\n    });\n  }\n\n  function renderGuidance() {\n    if (props.guidance.endDate) {\n      const endDate = format(props.guidance.endDate, \"MMM d\");\n      if (props.guidance.infected) {\n        if (person.noSymptomsFor24Hours) {\n          return t`${person.name} must isolate through ${endDate}`;\n        } else {\n          return t`${person.name} must isolate through at least ${endDate}`;\n        }\n      } else {\n        if (props.guidance.peopleWithOngoingExposureWithSymptoms?.length) {\n          return t`${person.name} must quarantine through at least ${endDate}`;\n        } else {\n          return t`${person.name} must quarantine through ${endDate}`;\n        }\n      }\n    } else {\n      return t`${person.name} should continue social distancing`;\n    }\n  }\n\n  function renderGuidanceDefinition(infected: boolean, exposed: boolean) {\n    return (\n      <p>\n        {infected\n          ? t`Avoid contact with everyone, including your household.`\n          : exposed\n          ? t`Avoid contact with everyone outside of your household.`\n          : \"\"}\n      </p>\n    );\n  }\n\n  function renderGuidanceMessage(guidance: Guidance) {\n    const getTestedNote = guidance.person.feelingSick ? (\n      <p>\n        {\" \"}\n        {t`Since ${guidance.person.name} is feeling sick, we recommend they get a COVID-19 test.`}\n      </p>\n    ) : (\n      <>\n        <p>\n          {t`If ${guidance.person.name} develops symptoms, they should call a doctor and get a COVID-19 test.`}\n        </p>\n        {commonSymptomsList()}\n      </>\n    );\n\n    if (guidance.endDate) {\n      const date = format(guidance.endDate, \"PPPP\");\n      if (guidance.infected) {\n        if (guidance.person.noSymptomsFor24Hours) {\n          return (\n            <p>\n              {t`This is 10 days after the earliest known date of illness onset.`}\n            </p>\n          );\n        } else {\n          return (\n            <>\n              <p>\n                {t`This is 10 days after the earliest known date of illness onset.`}\n              </p>\n              <p>\n                {t`Additionally, continue isolating until 24 hours after fever is gone.`}\n              </p>\n            </>\n          );\n        }\n      } else {\n        if (guidance.peopleWithOngoingExposureWithSymptoms?.length) {\n          const names = guidance.peopleWithOngoingExposureWithSymptoms?.join(\n            \", \"\n          );\n          return (\n            <>\n              <p>\n                {t`Please come back when symptoms for ${names} have improved for an\n                exact date.`}\n              </p>\n              {getTestedNote}\n            </>\n          );\n        } else {\n          return (\n            <>\n              <p>{t`This is 14 days after the last known exposure date.`}</p>\n              {getTestedNote}\n            </>\n          );\n        }\n      }\n    } else {\n      return (\n        <>\n          {guidance.person.vaccinated && (\n            <p>\n              {t`${guidance.person.name} is fully vaccinated, but they should continue social distancing and wearing a mask.`}\n            </p>\n          )}\n          {guidance.person.vaccinated &&\n            guidance.person.covidEvents[CovidEventName.LastCloseContact] !==\n              \"\" && (\n              <p>\n                {t`${guidance.person.name} had close contact with someone who has COVID-19, but they do not need to quarantine because they are fully vaccinated.`}\n              </p>\n            )}\n          <p>\n            {t`If ${guidance.person.name} develops symptoms, they should call a doctor and get a COVID-19 test.`}\n          </p>\n          {commonSymptomsList()}\n        </>\n      );\n    }\n  }\n\n  function renderEditing() {\n    return (\n      <div className=\"ml2 mb5\">\n        <div className=\"mb-3\">\n          <label htmlFor={`${person.id}-name`}>\n            {props.language === \"en\" ? \"Name\" : \"Nombre\"}\n          </label>\n          <div className=\"input-group\">\n            <input\n              className=\"form-control\"\n              value={person.name}\n              name=\"name\"\n              id={`${person.id}-name`}\n              type=\"text\"\n              onChange={(e: React.BaseSyntheticEvent) =>\n                props.personState.name.set(e.target.value)\n              }\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-secondary\"\n                onClick={(e: React.BaseSyntheticEvent) => {\n                  e.stopPropagation();\n                  removeFromMembers();\n                  if (members.length === 0) {\n                    props.addNewPerson();\n                  }\n                }}\n              >\n                {members.length === 1 ? t`Clear` : t`Remove`}\n              </button>\n            </div>\n          </div>\n        </div>\n        <MultipleChoiceQuestion\n          id={person.id}\n          questionText={t`${person.name} has been fully vaccinated for at least two weeks`}\n          checked={props.personState.vaccinated.get()}\n          onChange={() => {\n            props.personState.vaccinated.set(v => !v);\n            setContagiousState(contagious);\n          }}\n        />\n\n        <div className=\"mb-3\">\n          <hr />\n          {buildCovidEventQuestion(\n            CovidEventName.LastCloseContact,\n            t`${person.name} had close contact to someone COVID-19 positive that does not live with them`,\n            t`Date of last contact`,\n            <div>\n              {t`Close contact means any of the following:`}\n              <ul className=\"mx-3 mb-1\">\n                <li>\n                  {t`You were within 6 feet of them for a total of 15 minutes or\n                  more`}\n                </li>\n                <li>{t`You provided care at home to the person`}</li>\n                <li>\n                  {t`You had direct physical contact with the person (hugged or\n                  kissed them)`}\n                </li>\n                <li>{t`You shared eating or drinking utensils`}</li>\n                <li>\n                  {t`They sneezed, coughed, or somehow got respiratory droplets on\n                  you`}\n                </li>\n              </ul>{\" \"}\n              <div className=\"pt2\">\n                Note: In a later question, we will ask about close contact with\n                people you do live with.\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"mb-3\">\n          <hr />\n          {buildCovidEventQuestion(\n            CovidEventName.PositiveTest,\n            t`${person.name} has received a positive test result`,\n            t`Date of test`\n          )}\n        </div>\n        <div className=\"mb-3\">\n          <hr />\n          {buildCovidEventQuestion(\n            CovidEventName.SymptomsStart,\n            t`${person.name} has been feeling sick`,\n            t`Date of first appearance of symptoms`\n          )}\n\n          {feelingSick ? (\n            <>\n              <div className={\"mb-3\"} />\n              <MultipleChoiceQuestion\n                id={person.id}\n                questionText={t`${person.name}'s symptoms have been improved for 24 hours.`}\n                checked={props.personState.noSymptomsFor24Hours.get()}\n                onChange={() =>\n                  props.personState.noSymptomsFor24Hours.set(c => !c)\n                }\n                tooltip={\n                  <span>\n                    {t`Improved symptoms are a requirement for you to end isolation. If\n                  your symptoms improve AND you have had no fever for 24 hours\n                  without the use of medicine, check this box.`}{\" \"}\n                  </span>\n                }\n              />\n            </>\n          ) : null}\n        </div>\n        <InHouseExposureQuestions\n          person={person}\n          meaningfulInHouseExposures={meaningfulInHouseExposures}\n          relevantInHouseExposureEventsState={\n            relevantInHouseExposureEventsState\n          }\n        />\n      </div>\n    );\n  }\n\n  function renderRecommendationDetail() {\n    const guidanceDefinition = renderGuidanceDefinition(\n      props.guidance.infected,\n      !!props.guidance.endDate\n    );\n    const guidanceMessage = renderGuidanceMessage(props.guidance);\n    if (guidanceDefinition && guidanceMessage) {\n      return (\n        <div className=\"recommendation-detail\">\n          {guidanceDefinition}\n          {guidanceMessage}\n        </div>\n      );\n    }\n  }\n\n  function renderNonEditing() {\n    return (\n      <Disclosure\n        open={recommendationDetailIsOpen}\n        onChange={() =>\n          setRecommendationDetailIsOpen(!recommendationDetailIsOpen)\n        }\n      >\n        <DisclosureButton className=\"w-100\">\n          <h4 className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"\">{renderGuidance()}</span>\n\n            <span\n              aria-hidden=\"true\"\n              className={\n                \"fas \" +\n                (recommendationDetailIsOpen ? \"fa-angle-up\" : \"fa-angle-down\")\n              }\n            ></span>\n          </h4>\n        </DisclosureButton>\n        <DisclosurePanel>{renderRecommendationDetail()}</DisclosurePanel>\n        <hr />\n      </Disclosure>\n    );\n  }\n\n  return editingHousehold ? renderEditing() : renderNonEditing();\n}\n","import {\n  Guidance,\n  CovidEventName,\n  InHouseExposure,\n  PersonData,\n  Exposure\n} from \"./types\";\nimport { addDays, parse } from \"date-fns\";\nimport {\n  flow,\n  compact,\n  map,\n  thru,\n  partition,\n  filter,\n  max,\n  maxBy,\n  min,\n  minBy\n} from \"lodash/fp\";\n\nexport function computeHouseHoldQuarantinePeriod(\n  household: PersonData[],\n  inHouseExposures: InHouseExposure[]\n): Guidance[] {\n  const [infectedGuidances, quarantinedGuidances] = flow(\n    map((person: PersonData) => {\n      const isolationPeriod = computeIsolationPeriod(person);\n      if (isolationPeriod) {\n        const [startDate, endDate] = isolationPeriod;\n        return {\n          person: person,\n          infected: true,\n          startDate: startDate,\n          endDate: endDate\n        };\n      } else {\n        return {\n          person: person,\n          infected: false\n        };\n      }\n    }),\n    partition(c => c.infected)\n  )(household);\n  const updatedQuarantinedGuidance: Guidance[] = quarantinedGuidances.map(\n    guidance =>\n      computeQuarantineGuidance(guidance, inHouseExposures, infectedGuidances)\n  );\n  return [...infectedGuidances, ...updatedQuarantinedGuidance];\n}\n\nexport function computeIsolationPeriod(person: PersonData): Date[] | undefined {\n  const covidPositiveEvents = [\n    person.covidEvents[CovidEventName.SymptomsStart],\n    person.covidEvents[CovidEventName.PositiveTest]\n  ];\n  const illnessOnset = flow(\n    compact,\n    map((date: string) => parse(date, \"M/dd/yyyy\", new Date())),\n    thru((dates: Date[]) => min(dates))\n  )(covidPositiveEvents);\n  if (illnessOnset) {\n    const tenDaysAfterOnset = addDays(illnessOnset, 10);\n    const symptomsEnd = person.noSymptomsFor24Hours ? undefined : new Date(); // TODO: Rethink\n    const isolationEndDate = flow(\n      compact,\n      thru((dates: Date[]) => max(dates))\n    )([tenDaysAfterOnset, symptomsEnd]);\n    return [illnessOnset, isolationEndDate];\n  }\n}\n\nfunction computeQuarantineGuidance(\n  guidance: Guidance,\n  inHouseExposures: InHouseExposure[],\n  infectedGuidances: Guidance[]\n) {\n  const person = guidance.person;\n  const relevantInHouseExposures = filter(\n    (event: InHouseExposure) =>\n      event.quarantinedPerson === person.id && event.exposed\n  )(inHouseExposures);\n  const normalize = map((event: InHouseExposure) => {\n    const infectedGuidance = infectedGuidances.find(\n      guidance => guidance.person.id === event.contagiousPerson\n    ) as Guidance;\n    if (event.ongoing) {\n      return {\n        startDate: infectedGuidance.startDate as Date,\n        endDate: infectedGuidance.endDate as Date,\n        infectionSource: infectedGuidance.person\n      };\n    } else {\n      return {\n        startDate: infectedGuidance.startDate as Date,\n        endDate: parse(event.date, \"M/dd/yyyy\", new Date()),\n        infectionSource: infectedGuidance.person\n      };\n    }\n  });\n  const normalizedInHouseExposures = compact(\n    normalize(relevantInHouseExposures)\n  );\n  const exposures = addOutsideExposures(person, normalizedInHouseExposures);\n  const earliestExposure = minBy(exposure => exposure.startDate, exposures);\n  const latestExposure = maxBy(exposure => exposure.endDate, exposures);\n  let startDate = earliestExposure?.startDate;\n  let endDate = undefined;\n  if (latestExposure) {\n    endDate = addDays(latestExposure.endDate, 14);\n  }\n  const peopleWithOngoingExposureWithSymptoms = flow(\n    map((event: InHouseExposure) => {\n      if (event.ongoing) {\n        const personWithOngoingExposure = infectedGuidances.find(\n          guidance => guidance.person.id === event.contagiousPerson\n        )?.person;\n        if (!personWithOngoingExposure?.noSymptomsFor24Hours) {\n          return personWithOngoingExposure?.name;\n        }\n      }\n    }),\n    compact\n  )(relevantInHouseExposures);\n  return {\n    person: person,\n    infected: false,\n    startDate: startDate,\n    endDate: endDate,\n    infectionSource: latestExposure && latestExposure.infectionSource,\n    peopleWithOngoingExposureWithSymptoms: peopleWithOngoingExposureWithSymptoms\n  };\n}\n\nfunction addOutsideExposures(person: PersonData, exposures: Exposure[]) {\n  const outHouseExposureDateString =\n    person.covidEvents[CovidEventName.LastCloseContact];\n  if (!person.vaccinated && outHouseExposureDateString) {\n    const outHouseExposureDate = parse(\n      outHouseExposureDateString,\n      \"M/dd/yyyy\",\n      new Date()\n    );\n    const outHouseExposure = {\n      startDate: outHouseExposureDate,\n      endDate: outHouseExposureDate,\n      infectionSource: undefined\n    };\n    exposures = [...exposures, outHouseExposure];\n  }\n  return exposures;\n}\n","import React, { useRef } from \"react\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport Person from \"./Person\";\nimport { State } from \"@hookstate/core\";\nimport { computeHouseHoldQuarantinePeriod } from \"./calculator\";\nimport { Link } from \"react-router-dom\";\nimport { downloadEvents } from \"./calendar\";\nimport { t, jt } from 'ttag';\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  height: State<number>;\n  language: string;\n}\n\nexport default function Household(props: Props) {\n  const editingHousehold = props.editingHouseholdState.get();\n  const members = props.membersState.get();\n  const inHouseExposureEvents = props.inHouseExposureEventsState.get();\n  const guidances = computeHouseHoldQuarantinePeriod(\n    members,\n    inHouseExposureEvents\n  );\n\n  const editingPersonRef = useRef<HTMLDivElement>(null);\n\n  function addPerson(e: React.BaseSyntheticEvent) {\n    e.stopPropagation();\n    props.editingHouseholdState.set(true);\n    props.addNewPerson();\n  }\n\n\n  function renderTitle() {\n    if (editingHousehold) {\n      return (\n        <div className=\"pb4\">\n          <h2 className=\"page-header\" >\n            {t`Tell us about yourself and each person you live with.`}\n          </h2>\n          <p\n            className=\"pv3\"\n            style={{\n              fontFamily: \"Helvetica\",\n              fontStyle: \"normal\",\n              fontWeight: 400,\n              lineHeight: \"36px\",\n              letterSpacing: \"0em\",\n              textAlign: \"left\",\n              color: \"#000000\"\n            }}\n          >\n            {t`Thank you for doing your part to keep our community safe! For help\n            with a question, tap`}\n            <img\n              src={process.env.PUBLIC_URL + \"/circle-question.svg\"}\n              style={{ marginLeft: \"0.4rem\" }}\n            />\n          </p>\n        </div>\n      );\n    } else {\n      const healthCentersLink = <a style={{ textDecoration: \"underline\"}} href=\"https://www.clackamas.us/healthcenters\">\n              {t`Clackamas County health center`}\n            </a>;\n      return (\n        <>\n        <div className=\"pb3\">\n          <h2 className=\"page-header\">{t`Here’s what to do based on the latest CDC guidelines.`}</h2>\n          <p>\n            {jt`If you have further questions, please contact your doctor or a ${healthCentersLink}.`}\n          </p>\n        </div>\n        <hr className=\"pb4\"/>\n        </>\n      );\n    }\n  }\n\n  function renderAction() {\n    if (members.length) {\n      if (editingHousehold) {\n        return (\n          <div className=\"\">\n          <button\n            className=\"white get-recommendation-button\"\n            onClick={(e: React.BaseSyntheticEvent) => {\n              props.editingHouseholdState.set(false);\n              window.scrollTo(0,0);\n            }}\n          >\n            {t`Done`}{\" \"}\n          </button>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"d-flex justify-content-center\">\n            <button\n              className=\"my-3 update-button\"\n              onClick={() => {\n                props.editingHouseholdState.set(true);\n              }}\n            >\n              {t`EDIT ANSWERS`}\n            </button>\n\n          </div>\n\n        );\n      }\n    }\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\"\n        }}\n      >\n        <div\n          className={\"col-md-12\"}\n          style={{\n            backgroundColor: \"#fff\",\n            //minHeight: props.height.get() + \"px\" TODO:this is to manage the footer placement but has been messed up by other changes and so we're disabling it\n          }}\n        >\n          <div className={\"container\"}>\n            <div className={\"my-3\"} />\n            {renderTitle()}\n            <div>\n              {props.membersState.map((personState: State<PersonData>, index: number) => {\n                const person = personState.get();\n                const id = person.id;\n                const personGuidance = guidances.find(c => c.person.id === id);\n                if (personGuidance) {\n                  return (\n                    <Person\n                      key={id}\n                      personState={personState}\n                      membersState={props.membersState}\n                      inHouseExposureEventsState={\n                        props.inHouseExposureEventsState\n                      }\n                      editingHouseholdState={props.editingHouseholdState}\n                      guidance={personGuidance}\n                      editingPersonRef={editingPersonRef}\n                      addNewPerson={props.addNewPerson}\n                      recommendationDetailOpenByDefault={false}\n                        language={props.language}\n                    />\n                  );\n                }\n              })}\n            </div>\n            {editingHousehold && (\n              <button className=\"mb-2 add-another-person-button\" onClick={addPerson}>\n                <div style={{display: \"flex\"}}>\n                <div style={{width:\"44px\"}}> {/*hold the space open for no image load-time jump.*/}\n                <svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <circle cx=\"22\" cy=\"22\" r=\"21\" stroke-width=\"2\"/>\n                  <path d=\"M22 14V22M22 30V22M22 22H14M22 22H30\" stroke-width=\"2\"/>\n                </svg>\n\n                </div>\n                <span className={\"add-another-person-text\"}>\n                  {t`Add another person`} &nbsp;\n                </span>\n                </div>\n              </button>\n            )}\n            {renderAction()}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { t, jt } from 'ttag';\nimport { useState } from \"react\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel,\n} from \"@reach/disclosure\";\nimport Definitions from \"./Definitions\";\n\nexport default function Resources() {\n  const mapLink = <a style={{ textDecoration: \"underline\"}} href=\"https://govstatus.egov.com/or-oha-covid-19-testing\">{t`OHA’s test finder map`}</a>\n  return (\n\n\n    <div className=\"container w-60\">\n      <h2>{t`Resources`}</h2>\n      <div className=\"py-4\"/>\n      <QuestionBlock question= {t`What is the difference between Quarantine and Isolation?`} answer = {<Definitions/>}/>\n      <QuestionBlock question={t`I can't afford to quarantine or isolate`} answer={<div>{t`Help is available! Please call 211 to be connected to COVID-19 specific resources. Community based organizations can help you with food boxes, rent, and utilities. They can also help you get connected to other benefits you are eligible for.`}</div>}/>\n      <QuestionBlock question={t`Where do I get a test?`} answer={<div>{jt`You can find one using ${mapLink}.`}</div>}/>\n\n      <QuestionBlock question={t`I have additional questions but no primary care doctor`}\n        answer={\n          <>\n            <p className=\"pv2\">{t`If you are a Clackamas County resident, reach out to a Clackamas County health center. To set up care or learn more about any of our health clinics call 503-655-8471.`}</p>\n            <p className=\"pv2\">{t`If you are not a resident, we recommend checking your local health centers.`}</p>\n            <p className=\"pv2\">{t`Clackamas Health Centers offer care on a sliding scale to eligible uninsured and underinsured people. No one is refused care due to an inability to pay.`}</p>\n          </>\n        }/>\n    </div>\n  )\n}\n\nfunction QuestionBlock(props: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div className=\"\">\n      <Disclosure open={isOpen} onChange={() => setIsOpen(!isOpen)}>\n          <DisclosureButton className=\"w-100\">\n          <h4 className=\"d-flex justify-content-between align-items-center\">\n            <span className=\"resourceQuestionText\">\n              {props.question}\n            </span>\n\n          <span aria-hidden=\"true\" className={\"fas \" + (isOpen ? \"fa-angle-up\" : \"fa-angle-down\")}></span>\n          </h4>\n          </DisclosureButton>\n          <DisclosurePanel>\n          <div className=\"mv3 resourceAnswerText\">\n          {props.answer}\n          </div>\n          </DisclosurePanel>\n        <hr/>\n        </Disclosure>\n      </div>\n    )\n}\n\ninterface Props {\n  question: string;\n  answer: JSX.Element;\n}\n","import React from \"react\";\nimport GridView from \"./GridView\";\nimport { InHouseExposure, PersonData } from \"./types\";\nimport { State } from \"@hookstate/core/dist\";\nimport { Link } from \"react-router-dom\";\nimport Household from \"./Household\";\nimport Definitions from \"./Definitions\";\nimport Footer from \"./Footer\";\nimport Resources from \"./Resources\";\nimport { t, jt } from 'ttag';\n\ninterface Props {\n  addNewPerson: () => void;\n  membersState: State<PersonData[]>;\n  inHouseExposureEventsState: State<InHouseExposure[]>;\n  editingHouseholdState: State<boolean>;\n  height: State<number>;\n  language: string;\n  setLanguage: Function;\n}\n\nexport default function Recommendation(props: Props) {\n  const members = props.membersState.get();\n\n\n  return (\n    <div style={{ position: \"relative\", minHeight: \"100%\" }}>\n      <header>\n        <div className=\"navbar\">\n          <div\n            className=\"container d-flex justify-content-between\"\n          >\n            <Link to=\"/\" className=\"d-flex align-items-center home-link\">{t`COVID CALCULATOR`}</Link>\n            <button className=\"language-button\" onClick={()=> props.setLanguage(props.language===\"en\" ? \"es\" : \"en\")}>\n              <div>{(props.language===\"en\" ? \"ESPAÑOL\" : \"ENGLISH\")}</div>\n            </button>\n          </div>\n        </div>\n      </header>\n      <main className={\"main\"} role={\"main\"} style={{ paddingBottom: \"250px\" }}>\n        <section className={\"jumbotron\"} style={{ background: \"#FFFFFF\" }}>\n          <Household\n            addNewPerson={props.addNewPerson}\n            editingHouseholdState={props.editingHouseholdState}\n            height={props.height}\n            inHouseExposureEventsState={props.inHouseExposureEventsState}\n            membersState={props.membersState}\n            language={props.language}\n          />\n        </section>\n        <div\n          className=\"container pb-5\"\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            background: \"#F8F8F8\",\n            paddingTop: \"91px\",\n            maxWidth: \"100%\"\n          }}\n        >\n          <div\n            style={{\n              width: \"60%\",\n              textAlign: \"center\"\n            }}\n          >\n            {!props.editingHouseholdState.get() && <Resources/>}\n          </div>\n        </div>\n      </main>\n      <Footer/>\n    </div>\n  );\n}\n","import React, { useEffect, useState as useReactState } from \"react\";\nimport { useState } from \"@hookstate/core\";\nimport Home from \"./Home\";\nimport Recommendation from \"./Recommendation\";\nimport { CovidEventName, InHouseExposure, PersonData } from \"./types\";\nimport { compact } from \"lodash/fp\";\nimport { getRandomInt, isContagious } from \"./util\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { t, addLocale, useLocale } from \"ttag\";\n\nexport default function App() {\n  const [language, setLanguageState] = useReactState(\"en\");\n  const translationObject = require(\"./es.po.json\");\n  addLocale(\"es\", translationObject);\n  useLocale(language);\n  const height = useState(window.innerHeight);\n  const updateHeight = () => {\n    height.set(window.innerHeight);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateHeight);\n    return () => window.removeEventListener(\"resize\", updateHeight);\n  }, []);\n  const firstPerson = {\n    id: 1,\n    name: t`Person 1`,\n    covidEvents: {\n      [CovidEventName.LastCloseContact]: \"\",\n      [CovidEventName.SymptomsStart]: \"\",\n      [CovidEventName.PositiveTest]: \"\"\n    },\n    noSymptomsFor24Hours: true,\n    feelingSick: false,\n    vaccinated: false,\n    isNewPerson: true,\n    editing: true\n  };\n\n  const members = useState([firstPerson] as PersonData[]);\n  const inHouseExposureEvents = useState<InHouseExposure[]>([]);\n  const id = useState(2);\n  const editingHouseholdState = useState(true);\n  const editingPersonState = useState<number | undefined>(undefined);\n\n  function setLanguage(language: string) {\n    const from = language === \"es\" ? \"Person\" : \"Persona\";\n    const to = language === \"es\" ? \"Persona\" : \"Person\";\n    members.forEach(person => {\n      if (person.name.get().split(\" \")[0] === from) {\n        person.name.set(\n          `${to} ${person.name\n            .get()\n            .split(\" \")\n            .slice(1)\n            .join(\" \")}`\n        );\n      }\n    });\n    setLanguageState(language);\n  }\n\n  function addNewPerson() {\n    const currentId = id.get();\n    const newPersonNumber = members.length + 1;\n    const newPerson = {\n      id: currentId,\n      name: t`Person ${newPersonNumber}`,\n      covidEvents: {\n        [CovidEventName.LastCloseContact]: \"\",\n        [CovidEventName.SymptomsStart]: \"\",\n        [CovidEventName.PositiveTest]: \"\"\n      },\n      noSymptomsFor24Hours: true,\n      feelingSick: false,\n      vaccinated: false,\n      isNewPerson: true,\n      editing: true\n    };\n    id.set(id => id + 1);\n    members.set(members => [...members, newPerson]);\n    editingPersonState.set(currentId);\n    const newExposureEvents = members.get().map((person: PersonData) => {\n      if (isContagious(person)) {\n        return {\n          contagiousPerson: person.id,\n          quarantinedPerson: newPerson.id,\n          exposed: true,\n          ongoing: true,\n          date: \"\",\n          dateMissing: false,\n          dateInvalid: false\n        };\n      }\n    });\n    inHouseExposureEvents.merge(compact(newExposureEvents));\n  }\n\n  return (\n    <Router basename={`${process.env.PUBLIC_URL}`}>\n      <Switch>\n        <Route path=\"/recommendation\">\n          <Recommendation\n            addNewPerson={addNewPerson}\n            editingHouseholdState={editingHouseholdState}\n            height={height}\n            inHouseExposureEventsState={inHouseExposureEvents}\n            membersState={members}\n            language={language}\n            setLanguage={setLanguage}\n          />\n        </Route>\n        <Route path=\"/\">\n          <Home language={language} setLanguage={setLanguage} />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}